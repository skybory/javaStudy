1. 날짜처리

2. 컬렉션 프레임워크
 2-1. Collection Framework 란
  - 다수의 데이터를 쉽게 처리할 수 있는 표준화된 방법을 제공하는 클래스들로,
  기존 배열형태의 자료 저장에서 좀 더 다양한 데이터들을 저장하기 위한 필수 클래스이다.

 2-2. Collection Framework의 종류

 2-3. HashMap 클래스
  - 데이터에 이름표를 적용하여 저장하기
	-> HashMap 클래스는 Map 인터페이스를 상속받는 '자료보관소'이기 때문에, 암묵적 객체 형변환의 규칙에 따라
	Map 형태로 선언하고 HashMap 형태로 할당한다.
	-> 선언과 할당시에 HashMap의 이름표로 사용할 데이터형(String)과 HashMap에 저장할 데이터형을 클래스의 이름으로 명시해야 하는데
	이를 '제너릭스' 라고 한다.
	-> 제너릭스에 명시할 수 있는 데이터형은 반드시 클래스 이름이어야 하기 때문에 기본 자료형을 보관할 경우
	Wrapper 클래스의 이름을 사용한다.

	// <> 가 '제너릭스' 이다.
	Map <String, 저장할 데이터의 클래스 이름 > data 			//이름표의 데이터타입을 첫번째 파라미터로 받아옴
		= new HashMap<String, 저장할 데이터의 클래스 이름>();

	-> 기존에 저장된 데이터와 중복되는 이름이 저장될 경우,
	기존에 저장된 데이터를 덮어 씌우게 된다.

 2-4. ArrayList
  - ArrayList는 List 인터페이스를 상속받는 클래스로, 데이터를 이름표 없이 무제한으로 보관할 수 있다. (key값 없이 data를 보관할 수 있다)
  - ArrayList에 추가되는 데이터는 순차적으로 배열과 같은 인덱스 번호를 부여 받는다.
  - 상위 인터페이스형으로 선언하고, ArrayList 클래스로 객체를 할당하며, 선언과 할당 시에는 보관하고자 하는 자료형에 대한 제너릭스를 명시한다.
  - index 번호 부여

	List<저장할 데이터의 클래스 이름> list
		= new ArrayList<저장할 데이터의 클래스 이름>();

3. 파일 입출력
 3-1. File 클래스
  - File 클래스 파일 또는 폴더에 대한 정보를 제공하는 클래스이다.
  - File 클래스의 객체는 정보를 조회하고자 하는 파일이나 폴더의 경로에 대한 문자열을 생성자 파라미터로 전달하는 형태로 만들 수 있다.
  - 이 때 파라미터로 전달되는 경로가 실제로 존재하지 않더라도
  File 객체의 생성이 가능하다.


 3-2. 경로 설정하기
  - 운영체제간의 호환성 유지를 위한 '/' 의 사용
	-> 경로 문자열을 설정할 때 윈도우 기반에서는 역슬래시(\)를 사용하지만 이 경우 이스케이프 문자를 사용하여'\\'의 형식으로
	사용해야 하고, 가급적 다른 운영체제와의 호환성을 위해 슬래시(/)를 사용하는 것이 좋다.

  - 절대경로
	-> 작업 디렉토리와 관계없이 절대적인 위치를 의미하는 경로
	-> 윈도우 예시 : C:/Windows/System32/dirvers/etc/hosts
	-> 리눅스 예시 : /etc/httpd/conf/httpd.conf


  - 상대경로
	-> 작업 디렉토리를 기준으로 상대적인 위치를 의미하는 경로
	-> 같은 디렉토리 : 파일명, ./파일명
		ex) data.txt 	OR	 ./data.txt
	-> 상위 디렉토리 : ../파일명
		ex) ../data.txt
	-> 하위 디렉토리 : 디렉토리명/파일명 	OR	  ./디렉토리명/파일명
		ex) dir/data.txt 	OR	 ./dir/data.txt

	-> 윈도우 : ../dirvers/etc/hosts
	-> 리눅스 : ../conf/httpd.conf
















