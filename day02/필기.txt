DAY02 생성

기술블로그 관련 설명 먼저.

마크다운 형식.
중요한 것 : 글의 가독성

글을 day 별로 작성하는 것 보다는, 단원별로(더 쪼개야 함) 나누는 게 좋지 않을까..
수업시간에 배운 걸 모두 벨로그화 하는게 가장 좋지만, 선택과 집중이 필요한 경우엔 부족한 것들을 위주로 공부하자.

day01 밑에 우클릭 > new > java project > day02
module_info_java 는 늘 삭제해줌(그냥 설명서니깐 삭제하는것 같다)

src = source

class 에서는 public static void main 체크하는걸 잊지 말기!

리소스 밑에는 자바 클래스를 넣는게 약속

1. eclipse 단축키
	- ctrl + D : 커서가 포함된 line 삭제
	- ctrl + Z : 코드 뒤로 돌리기
	- ctrl + Y : 코드 앞으로 돌리기
	- ctrl + space : 작동 완성 ( 코드는 웬~~~만하면 자동 완성 )
	- ctrl + f11 : 실행
	- ctrl + a : 전체 선택	
	- ctrl + shift + F : 들여쓰기 자동 처리 ( 위에 꺼랑 같이 쓰면 좋음 )


2. 변수의 이해
	-변수는 하나의 그릇. 어떠한 데이터를 담을 지 .
	-그릇을 만드는 시점에 이름을 붙인다. num 1, num 2 , str, num 3 등등..
	num1 + num2 가능
	
	-숫자(정수,실수),문자
	변수를 선언하는 시점에 어떤 type의 문자를 담을지를 정함 (모두가 그런것은 아니나 Java는 그러하다)

	2-1. 자료형 ( data type )
	- 프로그래밍 언어에서 변수의 종류를 구별하기 위해 사용되는 키워드
	- 자바에서 제공되는 자료형의 종류에는 총 8가지가 있으며, 이를 기본 자료형 ( Primitive Data Type ) 이라고 한다.
	boolean : true, false(소문자임 중요!)
	char 
	byte, short, int, long
	float, double
	
	정수의 가장 기본형은 int (그냥 이거 쓰면 됨)
	실수형의 가장 기본형은 double 
	대소문자를 반드시 구분해야한다

(정석에 있는 이클립스의 단축키 단원을 참고하자)


	2-2. 자료형이 가지는 의미
		- 모든 변수는 컴퓨터의 메모리 영역에 생성된다.
		- 일반적으로 메모리란, PC에 설치하는 RAM을 의미
		- 4byte의 크기를 갖는 변수값 하나를 생성할 경우, PC의 RAM에서 해당 용량만큼을 사용하게 된다.
		- if 메모리가 가득 찼다 -> 선언이 안된다(자리가 없으니까) = 프로그램이 안돌아간다 
		- 위의 상황의 경우 ( 용량을 넘어서는 경우 ) OutOfMemory 에러 발생. ( 띄어쓰기 대신 대문자로 띄어쓰기를 표현 )
	
		-char : 2byte, 한글자만 저장이 됨. ex) "각"

	2-3. 문자열 데이터
		- 프로그램 코드에서 "문장"을 표현하기 위해 사용되는 데이터 값
		- String ( 대문자 주의 )
		- 문자열을 표현하기 위한 자료형 ( 첫 글자 대문자 주의 )
		- 거의 무제한에 가깝게 표현 가능.
		- 글자 수에 상관 없이 쌍따옴표(=큰따옴표)("")로 묶인 내용을 할당할 수 있다.
		- 숫자값의 경우 쌍따옴표로 묶이게 되면 문자열로 취급되므로, 숫자와 문자열을 분명하게 구별해 주어야 한다.

	2-4. 변수의 사용 방법
		- 변수를 사용하는 방법은 "선언"과 "할당"의 두 영역으로 구분된다.
		- 변수의 선언
			-> 선언은 데이터형과 사용하고자 하는 변수의 이름을 지정한 후, 세미콜론(;)으로 한 라인을 종료한다.

			데이터형 변수이름;
			int num1;
			boolean isKorean; (논리 데이터타입 boolean)
			
		- 변수의 할당 ( 그릇 안에 데이터를 담는 행위 )
			-> 선언된 변수에 원하는 값을 대입하는 과정을 의미한다. 값의 대입은 대입연산자 ( "=" ) 를 사용하며, 우변에서 좌변으로 대입된다(중요).
			
			변수 이름 = 값;
			num1 = 100; (세미콜론 주의)
			isKorean = true; (대소문자 주의)

		- 변수의 선언과 할당 ( 동시 처리 )
			데이터형 변수이름 = 값;
			int num2 = 200;
			
		- 문자열 데이터
			-> String형의 변수를 선언하고, 쌍따옴표로 묶인 값을 대입한다.
			-> 빈 문자열이나 공백도 문자열 데이터이다.
			
			// 문장을 포함, 공백도 포함
			String msg = "안녕하세요.       자바"; (세미콜론 주의)
			
			// 빈 문자열 값
			String blank = ""; (빈칸을 string으로 만들기, 일단은 빈 문자열로 설정해놓고, 나중에 값을 쓰려고 할때 사용)

			// 숫자값이 쌍따옴표로 묶였다면 문자열이다.
			String age = "20";


sysout 입력하고 ctrl + space 누르면 System.out.println() 나옴 

boolean 과 Boolean은 굉장히 다르기 때문에 대소문자에 조심할것


		- 문자열 데이터의 덧셈
			-> 문자열 + 문자열 : 두 문장을 하나로 합쳐준다.
			
			// language = JAVA
			String language = "JA" + "VA"; 

			-> 문자열 + 기본자료형(primitvie type) : 기본 자료형의 데이터가 문자열로 변환되고, 두 문장이 합쳐진다.

			int age = 20;
			String name = "자바학생";
			// 1. 오류난다
			// 2. 자바학생20
			// 3. 20자바학생

			//int type의 age가 String type 으로 바뀌면서, 20이문자열로 변환되어 자바학생20이 된다. 정답 2번

			name + age;
			String result = name + age;

			변수를 선언했을때, 내가 선언한 변수도 Ctrl+Space 에 나온다는 사실 ! 참고하자.


	2-5. 변수 이름 명명 규칙
		- 변수 이름은 영문, 숫자 , "_", "$" 만 사용가능하다. (특수문자는 $만 사용 가능함, 하지만 거의 안씀)
		- 변수 이름의 첫 글자는 숫자로 시작될 수 없다.
		- 대/소문자에를 엄격하게 구별하므로 오타에 주의해야한다.
		- 자바에서 사용하는 예약어(키워드)를 사용할 수 없다.
		- myname(사람의 이름을 받아오는 변수를 선언할 때),  myName(두 개의 단어가 연결이 될 때는 대문자로 넣어주거나), my_name(underbar를 넣어주면 보기 좋다), userPassword, ...
		- 클래스 이름의 명명 규칙도 변수 이름의 규칙과 동일하다.

		int int; -> ERROR
		int char; -> ERROR
		변수 이름으로 키워드(예약어)가 올 수 없음
		
		


	2-6. long, float, double
		- long, float, double은 다른 데이터형과의 구별을 위해 값 뒤에 데이터 형의 첫 글자를 접미사로 가질 수 있다.
		- 접미사는 대/소문자를 가리지 않지만, 가급적 대문자로 사용하는 것이 좋다.


		long money = 50000000L;
		float pi = 3.14F;
		double lat = 128.32452D;

단축키 : ctrl+alt+아래화살표/위로화살표 = 아래로 복사/위로복사

		

	2-7. 변수 사용의 제약
		- 반복하여 다른 값이 할당될 수 있지만, 중복 선언은 불가

			//num1 이라는 int형 그릇을 만들고, 100을 넣음. 
		 	int num1 = 100;
			
			//그 뒤에, 100을 지워내고, 200을 넣음(재할당)
			num1 = 200;

			//중복 선언이기 때문에 오류가 난다. num1 이라는 그릇이 있는데, 같은 num1 이라는 그릇을 사용할 수 없음. 변수 중복! 
			int num1 = 300;


		- 선언되지 않은 변수는 사용할 수 없다.
			int num1 = 100;
			num1 = 200;
			num2 = 300; 		// num2 의 그릇이 없기 때문에 ( = 선언되지 않은 변수의 사용 ) ERROR 발생

		- 값이 대입되지 않은 변수는 다른 변수에 대입하거나 출력할 수 없다.
		int num1;
		int num2 = 100;
		num1 = num2;		

		
		int num3;
		int num1 = num3; 		//에러가 발생

	2-8. 상수 = 변하지 않는 수 (constant) = 재할당이 불가능한 수
		- 변수와 마찬가지로 메모리상에 존재하지만, 값이 변경될 수 없는 데이터
		- final 키워드를 사용하여 선언된 변수는 상수로 생성된다.

		final int age = 20; 		//age에 다른 값의 재할당이 불가능함
		final float PI = 3.14F; 	//PI에 다른 값의 재할당이 불가능함

		- 재할당이 불가능하고 읽기 전용인 값이다.		
		

3. 연산자
	3-1. 연산자
		- 프로그램에서 연산을 수행하기 위해 사용되는 특수기호
	3-2. 종류
		- 대입연산자
			: 변수에 숫자나 문자열 등의 자료를 입력하거나 연산 결과를 다른 변수에 할당
		- 사칙연산자
			: 더하기(+), 빼기(-), 곱하기(*), 몫(/), 나머지(%) //사칙연산자는 4개이다 -> 틀린말! 5개임 ( 몫 & 나머지 때문)
		- 단항연산자
			: 변수에 대한 연산 결과를 다시 자기 자신에게 적용하는 경우 사용
		- 증감연산자
			: 특정 변수에 저장되어 있는 값을 1씩 증가, 또는 감소시킬 경우 사용
		- 비교연산자
			: 두 개의 변수값간의 관계를 비교하여 참(true), 거짓(false)의 관계를 반환
		- 논리연산자
			: 좌변과 우변을 논리연산하고, 참일 때는 true, 거짓일 때는 false를 반환
		- 삼항연산자(나중에)
			

	3-3. 사칙연산자
		- 더하기(+), 빼기(-), 곱하기(*), 몫(/), 나머지(%) 
		- 사칙 연산의 결과는 대입연산자를 통해 다른 변수에 대입될 수 있다.
		- 나눗셈 
			-> 10 / 3 : 나눗셈의 몫만을 취하여 결과값이 "3"이 된다.
			-> 10 % 3 : 나눗셈의 나머지만을 취하여 결과값이 "1"이 된다.

		- 모든 수는 0으로 나눌 수 없다.
		
		

	3-4. 단항연산자
		- 어떤 변수의 값에 대한 계산 결과를 다시 자기 자신에게 대입하고자 하는 경우의 약식 표현
		
		int x = 100;
		x = x + 5;
		-> 단항연산자로 표현
		int x = 100;
		x += 5; 			// x = x + 5 랑 완전히 같은 코드임


		- 단항연산자는 모든 사칙연산자에 표현 가능함
		->  +=, -=, *=, /=, %=

						// 값을 예측하고 확인하는 과정으로 'println'를 쓰는것!!


	3-5. 증감연산자
		- 단항연산자에서 덧셈과 뺄셈을 조금 더 축약시킨 형태
		- 단한 연산자로 표현할 수 있는 식에서 계산 대상 값이 1인 경우, 덧셈과 뺄셈에 대해서 다시 한 번 축약할 수 있다.

		- 덧셈의 경우
			x = x + 1;	// 사칙연산자
			x += 1;  	// 단항연산자
			x++;		// 증감연산자1
			++x;		// 증감연산자2

		- 뺄셈의 경우
			x = x - 1; 	// 사칙연산자
			x -= 1;		// 단항연산자
			x--;		// 증감연산자1
			--x;		// 증감연산자2



	3-6. "x++" 와 "++x" 의 차이
		- 증감연산자는 그 자체가 다른 연산식의 피연산자로 사용될 수 있다. 이 때, 증감연산자의 표시 위치에 따라 결과가 다르게 적용된다.
		- x++
			-> 증감 연산자가 뒤에 표시되는 경우,
			현재 x의 값을 먼저 수식에 적용하고, 나중에 x에 대한 1증가 처리를 한다.
		
		int a = 100;
		int x = 1; 		// 선언 및 할당
		int y = a + x++;	// 수식에 먼저 적용하고, 나중에 X값을 1 더함 , 따라서 y = 101



		-> 증감연산자가 앞에 표시되는 경우, 먼저 현재 x의 값을 1 증가시킨 후, 그 결과를 수식에 적용한다.
		
		int a = 100;
		int x = 1; 		// 선언 및 할당
		int y = a + ++x;	// 먼저 x값에 1을 더하고, 수식에 적용시킴 , 따라서 y = 102
		
		-> 100 + 2, y = 102, x = 2

		


	3-7. 비교연산자
		- 같다, 다르다, 크다(초과), 크거나 같다(이상), 작다(미만), 작거나 같다(이하) 에 대한  비교를 수행하는 연산자
		- 주어진 식이 참인지 거짓인지만 판별이 가능하므로, 연산 결과는 boolean 값으로 생성된다.

		int x = 100;
		int y = 1;
		boolean r = x 비교연산자 y;


		- 대입연산자 : =  	// 오른쪽의 값을 왼쪽에 대입
		- 비교연산자 같다: ==	// 왼쪽과 오른쪽의 값이 같다
		- 비교연산자 다르다 : != 	// 다르다 ( 느낌표는 부정(not)의 의미 )
		- 초과 : >
		- 이상 : >=
		- 미만 : <
		- 이하 : <=

	3-8. 논리연산자
		- 두 개 이상의 비교 연산자의 결과나 boolean 값에 대해 추가로 and 나 or 연산을 수행하여 결과를 얻는다.
		- AND는 "&&" : 두 개의 boolean 값을 비교하여 모두 true인 경우에만 결과값이 true 이다.
		- OR는 "||" : 두 개의 boolean 값을 비교하여 둘 중 하나라도 true인 경우 결과가 true이다. 


4. 형변환
	4-1. 형변환
		- 변수의 자료형이 변환되는 것을 의미. (기본 자료형 8가지 배움)
		- 특정 자료형의 값을 다른 자료형의 변수에 대입할 수 있다.
		- 암묵적 형변환(Upcasting) 과 명시적 형변환 (Downcasting) 의 두 종류가 있다. ( 작은 것 -> 큰 것 : 데이터 손실 X, 큰 것 -> 작은 것 변형: 데이터 손실 O )

	4.2 암묵적 형변환
		- 서로 다른 자료형을 연산 혹은 대입하는 경우, Java 컴파일러가 자료형을 통일한다. 이 과정에서 발생하는 형변환을 암묵적 형변환 이라고 한다. (데이터 손실이 없어서 굳이 말할필요 X)
		long a = 100;	 // 정수형
		float b = a;	// 정수형을 실수형에 대입
		=> 즉 , 암묵적 형변환은 어떤 변수가 더 큰 범위의 변수로 대입 가능함을 의미한다.

	4.3 암묵적 형변환이 허용되는 범위
		- 암묵적 형변환은 데이터의 손실이 발생하지 않는 범위 내에서만 이루어진다.
		- double형 데이터 20.5 를 int 에 대입하는 경우, 0.5에 대한 데이터 손실이 불가피하므로, 에러가 발생한다.


	4.4 명시적 형변환
		- 데이터의 손실을 감수하더라도, 강제로 형변환 시키는 형태
		- 자료형 b = (변환할 자료형)a;

		- 실수형을 정수형으로 변환하는 경우, 소수점 이하 자리는 버려진다.
		- double a = 3.14d;
		- int b = (int)a;			// 결과는 3
		- 아스키 코드에 대한 숫자값을 char형으로 변환하면, 해당 글자로 변환이 된다.
		- int a = 97;
		- char b = (char)a;			// 결과는 'a' 	


=================================================================================================================================================

파일 만들 때 주의사항!
package 이름은 무조건 소문자
class 첫자는 무조건 대문자, public static void main 체크~


*정보처리기사 자격증 취득 후 정보처리기술자 자격증 취득 시 공기업 쉽게 감
